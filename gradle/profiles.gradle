    def devProfile='dev'
    def prodProfile='prod'
    def activeProfile

    if (project.hasProperty('prod')) {
        activeProfile = prodProfile
        apply from: rootProject.file('gradle/profile_prod.gradle')
    } else {
        activeProfile = devProfile
        apply from: rootProject.file('gradle/profile_dev.gradle')
    }
    println 'Using profile: "' + activeProfile + '" for ' + project.getName()

    test {
        systemProperties = [
            'spring.profiles.active': activeProfile
        ]
    }

    // bootRun will rely on the -P profile argument,
    // defaulting to the "local" profile if no -P arguments are provided
    bootRun {
        systemProperties = [
                'spring.profiles.active': activeProfile
        ]

        // Use -Pproperty.name=value in addition to a -P profile argument
        // for each property below to pass database connection properties.
        //
        // These will only be used if profile specific property files do not override them.
        // They are intended for use with the "prod" profile.
        ext.applyPropertyIfExists = { propertyKey ->
            if(project.hasProperty(propertyKey)) {
                systemProperties[propertyKey] = project.getProperty(propertyKey)
            }
        }
    }
